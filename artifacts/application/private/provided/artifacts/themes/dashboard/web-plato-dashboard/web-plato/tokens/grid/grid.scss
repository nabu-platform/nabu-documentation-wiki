// ---------------------------------------------- container

@mixin grid-container() {
	margin-left: auto;
	margin-right: auto;
	max-width: $container-max-width;
}

.container {
	@include grid-container();
}

// ---------------------------------------------- grid columns


//TODO: grid size scales
// extra-small, small, medium, large: set up hashmap with dividers
// xs: 4, s: 3, m: 2, l: 1
// when dividing, use rounding, both ceil and floor. If ceil is a whole divider of the grid (modulo = 0), use ceil. Else use floor.
$grid-columns-size-scale: (
	"extra-small": 4,
	"small": 3,
	"medium": 2,
	"large": 1
) !default;

// TODO : replace values with $breakpoints mapping
$grid-columns-breakpoint-small-medium: ">=medium" !default;
$grid-columns-breakpoint-medium-large: ">=large" !default;

$grid-columns-count-small: 2 !default;
$grid-columns-count-medium: 6 !default;
$grid-columns-count-large: 12 !default;

$grid-columns-gutter-width: spacing("l") !default;

.plato-grid_column .plato-grid_row {
	margin-left: calc(-1 * $grid-columns-gutter-width / 2);
	margin-right: calc(-1 * $grid-columns-gutter-width / 2);
}

// Mixins to eliminate code repitition
@mixin grid-reset-offset {
	margin-left: auto;
	left: auto;
	right: auto;
}

@mixin grid-classes($size, $i, $percentage) {
	& .plato-grid_column_offset-#{$size}#{$i}, & %plato-grid_column_offset-#{$size}#{$i} {
		margin-left: $percentage;
	}
	& .plato-grid_column_pull-#{$size}#{$i}, & %plato-grid_column_pull-#{$size}#{$i} {
		right: $percentage;
	}
	& .plato-grid_column_push-#{$size}#{$i}, & %plato-grid_column_push-#{$size}#{$i} {
		left: $percentage;
	}
}

@mixin grid-sizes($column-count, $size) {
	@each $scale, $divider in $grid-columns-size-scale {
		$num-columns: 1;
		@if ( $column-count % ceil($column-count / $divider) == 0 ) {
			$num-columns: ceil($column-count / $divider);
		}
		@else {
			$num-columns: floor($column-count / $divider);
		}
		.plato-grid_column-#{$scale} {
			@extend %plato-grid_column-#{$size}#{$num-columns};
		}
	}
}

@mixin plato-grid_row {
	margin-left: auto;
	margin-right: auto;
	// margin-bottom: $grid-columns-gutter-width;
	// Clear floating children
	&:after {
		content: "";
		display: table;
		clear: both;
	}
	[class*="plato-grid_column-"] {
		box-sizing: border-box;
		display: inline-block;
		flex: none !important;
		float: left;
		min-height: 1px;
		padding: 0 calc(#{$grid-columns-gutter-width} / 2);
		&[class*="push-"],
		&[class*="pull-"] {
			position: relative;
		}
		&.clear-gutters {
			padding: 0;
		}
	}
	.plato-grid_column_offset-center, %plato-grid_column_offset-center {
		margin-left: auto;
		margin-right: auto;
	}
	&.align-left {
		margin-left: 0;
	}
	&.align-right {
		margin-right: 0;
	}
}

.plato-grid_row, %plato-grid_row {
	@include plato-grid_row();
	// Generate grid for small breakpoint and up
	$i: 1;
	@while $i <= $grid-columns-count-small {
		$percentage: unquote((100 / ($grid-columns-count-small / $i)) + "%");
		.plato-grid_column-small#{$i}, %plato-grid_column-small#{$i} {
			width: $percentage;
			@include grid-reset-offset;
		}
		$i: $i+1;
	}
	$i: 1;
	@while $i <= $grid-columns-count-small {
		$percentage: unquote((100 / ($grid-columns-count-small / $i)) + "%");
		@include grid-classes("small", $i, $percentage);
		$i: $i + 1;
	}
	@include grid-sizes($grid-columns-count-small, "small");
	// Generate grid for medium breakpoint and up
	@include media($grid-columns-breakpoint-small-medium) {
		$i: 1;
		@while $i <= $grid-columns-count-medium {
			$percentage: unquote((100 / ($grid-columns-count-medium / $i)) + "%");
			.plato-grid_column-medium#{$i}, %plato-grid_column-medium#{$i} {
				width: $percentage;
				@include grid-reset-offset;
			}
			$i: $i+1;
		}
		$i: 1;
		@while $i <= $grid-columns-count-medium {
			$percentage: unquote((100 / ($grid-columns-count-medium / $i)) + "%");
			@include grid-classes("medium", $i, $percentage);
			$i: $i + 1;
		}
		@include grid-sizes($grid-columns-count-medium, "medium");
	}
	// Generate grid for large breakpoint and up
	@include media($grid-columns-breakpoint-medium-large) {
		$i: 1;
		@while $i <= $grid-columns-count-large {
			$percentage: unquote((100 / ($grid-columns-count-large / $i)) + "%");
			.plato-grid_column-large#{$i}, %plato-grid_column-large#{$i} {
				width: $percentage;
				@include grid-reset-offset;
			}
			$i: $i+1;
		}
		$i: 1;
		@while $i <= $grid-columns-count-large {
			$percentage: unquote((100 / ($grid-columns-count-large / $i)) + "%");
			@include grid-classes("large", $i, $percentage);
			$i: $i + 1;
		}
		@include grid-sizes($grid-columns-count-large, "large");
	}
}